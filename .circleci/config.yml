version: 2.1

orbs:
  win: circleci/windows@2.4.1
#  github-cli: circleci/github-cli@1.0.5

jobs:
  build:
    executor:
      name: win/default
      size: medium
      shell: bash
    steps:
      - run: go get -u github.com/tcnksm/ghr
      - run: echo 'export PATH=$PATH:/c/Users/circleci/go/bin' >> $BASH_ENV
      - run: printenv
      # CIRCLE_PROJECT_USERNAME = Coding-Badly
      # CIRCLE_PROJECT_REPONAME = GCIP
      # CIRCLE_SHA1 = 31c37fdc409bc79c56e42fb8eb66cb52ca732b46
      - run: echo ${CIRCLE_PROJECT_USERNAME}
      - run:
          name: "Publish a release to GitHub"
          command: >
            ghr
            -t ${GITHUB_TOKEN}
            -u ${CIRCLE_PROJECT_USERNAME}
            -r ${CIRCLE_PROJECT_REPONAME}
            -c ${CIRCLE_SHA1}
            -n "Current Windows"
            -b "Current version of G Code Insert Pause for Windows"
            -delete
            "Current Windows"
            /c/Users/circleci/go/bin/ghr.exe


#            VERSION="1.0.0"
#            ghr
#            -t ${GITHUB_TOKEN}
#            -u ${CIRCLE_PROJECT_USERNAME}
#            -r ${CIRCLE_PROJECT_REPONAME}
#            -c ${CIRCLE_SHA1}
#            -delete
#            ${VERSION}
#            /c/Users/circleci/go/bin/ghr.exe

#      - run: ls -laR /c/Users/circleci/go/bin
#      - run: 
#          name: "Dump the entire disk"
#          command: ls -laR /c

# $GOPATH/bin/hello

#      - checkout

#      - run: python --version
#        # Python 3.7.3

#      - run: aws --version
#        # aws-cli/1.16.209 Python/3.6.0 Windows/10 botocore/1.12.199

#      # Install WiX.  It's used to build our installer.
#      - run: choco install -y wixtoolset
#      - run:
#          command: |
#            echo 'export PATH=$PATH:/c/Program\ Files\ \(x86\)/WiX\ Toolset\ v3.11/bin' >> $BASH_ENV
#      - run: dark

#      # Install Rust.  Don't use the Chocolatey version.  It tends to have minor issues and be a
#      # bit behind the latest version.
#      - run: curl --location --silent --output "$TEMP/rustup-init.exe" "https://win.rustup.rs/"
#      - run: $TEMP/rustup-init.exe -y --default-toolchain "stable-x86_64-pc-windows-msvc" --profile minimal
#      - run:
#          command: |
#            echo 'export PATH=$HOME/.cargo/bin:$PATH' >> $BASH_ENV
#      - run:
#          name: "Report the compiler version"
#          command: rustc --version

#      # The built-in Git client doesn't work.  Use the command line client.
#      - run: mkdir ~/.cargo || true
#      - run: echo "[net]" >> ~/.cargo/config.toml
#      - run: echo "git-fetch-with-cli = true" >> ~/.cargo/config.toml

#      - run: 
#          name: "Install cargo-wix; clone"
#          command: git clone --single-branch --branch rusty-pipe https://github.com/Coding-Badly/cargo-wix.git
#          working_directory: ".."
#      - run:
#          name: "Install cargo-wix; install"
#          command: cargo install --path cargo-wix
#          working_directory: ".."

#      - run:
#          name: "Fetch the latest Visual C++ Redistributable"
## Ideally we always use the latest Visual C run time libraries...
##      run: curl --location --silent --output vc_redist.x64.exe "https://aka.ms/vs/16/release/vc_redist.x64.exe"
## Sometime before 2021-06-15 Microsoft (finally) switched to a single stub DLL with the actual run
## time libraries installed with the operating system.  Before using those we need to test on
## Windows 7 / Server 2012 R2 and Windows 10 / Server 2016+.  Until we have had a chance to test
## we're going to pin to the last version that included the full run time.
#          command: curl --location --silent --output $TEMP/vc_redist.x64.exe "https://aka.ms/vs/16/release/14.28.29914/VC_Redist.x64.exe"
#          # Don't use PowerShell's curl.  It's wretchedly slow.
#          shell: bash

#      - run:
#          name: "Expand Visual C++ Redistributable"
#          command: |
#            dark $TEMP/vc_redist.x64.exe -x vc_redist
#          working_directory: "./original/wix"

#      - run: ls -laR "./original/wix"

#      - run:
#          name: "Expand dlls"
#          command: >
#            7z x -y -odlls AttachedContainer/packages/vcRuntimeMinimum_amd64/cab1.cab
#            vcruntime140.dll
#            api_ms_win_crt_math_l1_1_0.dll
#            api_ms_win_crt_heap_l1_1_0.dll
#            api_ms_win_crt_string_l1_1_0.dll
#            api_ms_win_crt_runtime_l1_1_0.dll
#            api_ms_win_crt_stdio_l1_1_0.dll
#            api_ms_win_crt_locale_l1_1_0.dll
#          working_directory: "./original/wix/vc_redist"

#      - run:
#          name: "Rename dlls"
#          # For whatever reason vc_redist.x64.exe names these with underscores internally
#          # despite them needing to be named with dashes at runtime
#          command: |
#            mv api_ms_win_crt_math_l1_1_0.dll api-ms-win-crt-math-l1-1-0.dll
#            mv api_ms_win_crt_heap_l1_1_0.dll api-ms-win-crt-heap-l1-1-0.dll
#            mv api_ms_win_crt_string_l1_1_0.dll api-ms-win-crt-string-l1-1-0.dll
#            mv api_ms_win_crt_runtime_l1_1_0.dll api-ms-win-crt-runtime-l1-1-0.dll
#            mv api_ms_win_crt_stdio_l1_1_0.dll api-ms-win-crt-stdio-l1-1-0.dll
#            mv api_ms_win_crt_locale_l1_1_0.dll api-ms-win-crt-locale-l1-1-0.dll
#          working_directory: "./original/wix/vc_redist/dlls"


#      - run: 
#          name: "Dump the entire disk"
#          command: ls -laR /c
#      - run: 
#          name: "Dump the entire disk"
#          command: ls -laR /c >> $TEMP/c.txt
#      - store_artifacts:
#          path: $TEMP/c.txt
#          destination: entire-c-drive.txt

#      - run:
#          command: |
#            echo 'export PATH=$PATH:/c/Program\ Files\ \(x86\)/Windows\ Kits/10/bin/10.0.22000.0/x64' >> $BASH_ENV
#      - run: 
#          name: "Can we sign?"
#          command: signtool.exe


#      - run: cargo build --locked --release --manifest-path ./Cargo.toml

#      - run: ls -laR ..
#      - run:
#          command: dir "\dark.exe" /s /b > junk.txt
#          shell: cmd
#      - run: cat junk.txt

#choco install windows-sdk-10.1

#      # .NET 3.5 is required for WiX 3.11
#      - run: 
#          command: DISM /Online /Enable-Feature /FeatureName:NetFx3 /All
#          shell: cmd
#
#      # https://wixtoolset.org/releases/
#      - run: curl --location --silent --output "wix311.exe" "https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311.exe"
#
#      # The command below works when run from a command prompt on an EC2 instance.  It does not
#      # appear to be working in CircleCI.  The installer runs as a GUI application (detached).
#      # In any case, the installer does not appear to run long enough to do what it needs to do.
#      - run:
#          command: wix311.exe /quiet
#          shell: cmd

#      # https://wixtoolset.org/releases/v3-14-0-5722/
#      - run: curl --location --silent --output "wix314.exe" "https://wixtoolset.org/downloads/v3.14.0.5722/wix314.exe"
#
#      # The command below works when run from a command prompt on an EC2 instance.  It does not
#      # appear to be working in CircleCI.  The installer runs as a GUI application (detached).
#      # In any case, the installer does not appear to run long enough to do what it needs to do.
#      - run:
#          command: wix314.exe /quiet
#          shell: cmd
#      - run: ls -la "/c/Program Files (x86)/" || true

#          ps --all --long --windows
#          ps --all --long --windows
#          ps --all --long --windows
#      - run: printenv
#      - run: printenv
#      - run: printenv
#      - run: printenv
#      - run: ls -laR "/c/Program Files (x86)/WiX Toolset v3.14/" || true
#      - run: ps --help
#      - run: docker --help

# WIX=C:\Program Files (x86)\WiX Toolset v3.14\

# C:\Program Files (x86)\WiX Toolset v3.14\

# WiX Toolset requires the .NET Framework 3.5.1 Windows feature to be enabled

#      - github-cli/setup
#      - checkout
#      - run: rc.exe
#      - run: winres.exe

#      - run: ls -laR /c
#      - run: windres
#      - checkout
#      - run: curl --location --silent --output "rustup-init.exe" "https://win.rustup.rs/"
#      - run: ./rustup-init.exe -y --default-toolchain "stable-x86_64-pc-windows-msvc" --profile minimal
#      - run: mkdir .cargo
#      - run: echo "[net]" >> .cargo/config.toml
#      - run: echo "git-fetch-with-cli = true" >> .cargo/config.toml
#      - run:
#          command: |
#            echo 'export PATH=$HOME/.cargo/bin:$PATH' >> $BASH_ENV
#      - run: ls -laR ..
#      - run: cargo build --locked --release --manifest-path ./Cargo.toml

#      - run: printenv
#      - run: ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete "0.0.1" ./target/release/gcip.exe
#      - run: ls -laR ..
#      - run: go get github.com/tcnksm/ghr
#      - run: ls -laR ..

#    docker:
#      - image: cimg/rust:1.57.0

#VERSION=$(my-binary --version)
#ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} ./artifacts/


#      - run:
#          command: rustc -Vv
#          shell: cmd

#      - run: rustc -Vv
#      - run: cargo --version

#      - run:
#          command: dir "C:/" /s
#          shell: cmd
   
#      - run:
#          command: 'Get-ChildItem env:'
#          shell: PowerShell
#      - run: ls / -laR
#      - run:
#          command: dir C:\ /s
#          shell: cmd
#      - checkout
#      - run: curl --location --silent --output "rustup-init.exe" "https://win.rustup.rs/"
#      - run: ls -la
#      - run: ./rustup-init.exe -y --default-toolchain "stable-x86_64-pc-windows-msvc" --no-modify-path --profile minimal
#      - run: ls -la
#      - run:
#          command: |
#            $env:Path += ";C:\Users\circleci\.cargo\bin"
#          shell: PowerShell
#      - run: rustc -Vv
#      - run: cargo --version

#      - run: 'Write-Host ''Hello, Windows'''

# curl is faster
#      - run:
#          command: |
#            $ProgressPreference = "SilentlyContinue"
#            Invoke-WebRequest -Uri "https://win.rustup.rs/" -OutFile "rustup-init-2.exe"
#          shell: PowerShell

#      - run: |
#          ps --all --long --windows
#          ps --all --long --windows
#          ps --all --long --windows

#      - run: echo "${BASH_VERSION}"
#        # 4.4.23(1)-release
      # .NET 3.5 is required for WiX 3.11
#      - run: 
#          command: DISM /Online /Enable-Feature /FeatureName:NetFx3 /All
#          shell: cmd

#      - run: cat /c/ProgramData/chocolatey/logs/chocolatey.log

#      - run: ls -la "/c/Program Files (x86)/WiX Toolset v3.11" || true
#      - run: printenv
#      - run: cat $BASH_ENV

#      - run: pip3 install awscli

#      - run: ls -laR /c/Users/circleci/go/bin || true


workflows:
  my-workflow:
    jobs:
      - build

#workflows:
#  version: 2
#  all_jobs:
#    jobs:
#      - job-linux-1
#      - job-windows-1
#      - job-windows-2
#
#jobs:
#  job-linux-1:
#    machine:
#      docker_layer_caching: false
#      image: ubuntu-2004:202008-01
#    steps:
#      - checkout
#      - run:
#          name: "download rustup-init"
#          command: |
#            curl --proto https --tlsv1.2 -sSf https://sh.rustup.rs --output rustup
#            chmod 770 ./rustup
#      - run:
#          name: "install Rust"
#          command: |
#            ./rustup -y -v --default-host x86_64-unknown-linux-gnu --default-toolchain stable --profile minimal
#      - run:
#          name: "compile release version"
#          command: |
#            cargo build --release
#      - store_artifacts:
#          path: ./target/release/gcip
#          destination: gcip-linux-1
#
#  job-windows-1:
#    executor: win/default
#    steps:
#      - checkout
#      - run:
#          name: "allow https when fetching from GitHub"
#          command: |
#            git config --global --unset url.ssh://git@github.com.insteadof
#      - run:
#          name: "install Rust the chocolatey way"
#          command: |
#            choco install rust-ms
#      - run:
#          name: "compile release version"
#          command: |
#            cargo build --release
#      - store_artifacts:
#          path: ./target/release/gcip.exe
#          destination: gcip-windows-1.exe
#
#  job-windows-2:
#    executor: win/default
#    steps:
#      - checkout
#      - run:
#          name: "allow https when fetching from GitHub"
#          command: |
#            git config --global --unset url.ssh://git@github.com.insteadof
#      - run:
#          name: "download rustup-init"
#          command: |
#            curl --proto https --tlsv1.2 -sSf https://win.rustup.rs/x86_64 --output rustup-init.exe
#          shell: bash.exe
#      - run:
#          name: "install Rust"
#          command: |
#            rustup-init -y -v --default-host x86_64-pc-windows-msvc --default-toolchain stable --profile minimal
#          shell: cmd.exe
#      - run:
#          name: "compile release version"
#          command: |
#            %USERPROFILE%\.cargo\bin\cargo build --release
#          shell: cmd.exe
#      - store_artifacts:
#          path: ./target/release/gcip.exe
#          destination: gcip-windows-2.exe
